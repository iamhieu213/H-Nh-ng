
Lab1_20242.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023c0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800256c  0800256c  0000356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002584  08002584  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  08002584  08002584  00003584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800258c  0800258c  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800258c  0800258c  0000358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002590  08002590  00003590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002594  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000401c  2**0
                  CONTENTS
 10 .bss          00000080  2000001c  2000001c  0000401c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  0000401c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097f4  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000193b  00000000  00000000  0000d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0000f180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bb  00000000  00000000  0000fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002311d  00000000  00000000  0001034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b578  00000000  00000000  00033468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d775d  00000000  00000000  0003e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011613d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002954  00000000  00000000  00116180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00118ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002554 	.word	0x08002554

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08002554 	.word	0x08002554

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Set7SegDisplayValue>:
						0b00000111, //7
						0b01111111, //8
						0b01101111};//9

void Set7SegDisplayValue(int val)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	DisplayValue = val;
 80004e4:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <Set7SegDisplayValue+0x20>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6013      	str	r3, [r2, #0]
	pos = 0;
 80004ea:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <Set7SegDisplayValue+0x24>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	20000038 	.word	0x20000038
 8000500:	2000003c 	.word	0x2000003c

08000504 <Run7SegDisplay>:

void Run7SegDisplay()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
	unsigned char val;
	pos++;
 800050a:	4b70      	ldr	r3, [pc, #448]	@ (80006cc <Run7SegDisplay+0x1c8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	4a6e      	ldr	r2, [pc, #440]	@ (80006cc <Run7SegDisplay+0x1c8>)
 8000512:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2104      	movs	r1, #4
 8000518:	486d      	ldr	r0, [pc, #436]	@ (80006d0 <Run7SegDisplay+0x1cc>)
 800051a:	f000 ffd1 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2108      	movs	r1, #8
 8000522:	486b      	ldr	r0, [pc, #428]	@ (80006d0 <Run7SegDisplay+0x1cc>)
 8000524:	f000 ffcc 	bl	80014c0 <HAL_GPIO_WritePin>

	if (pos & 0x1)
 8000528:	4b68      	ldr	r3, [pc, #416]	@ (80006cc <Run7SegDisplay+0x1c8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	2b00      	cmp	r3, #0
 8000532:	d010      	beq.n	8000556 <Run7SegDisplay+0x52>
		val = Mask[DisplayValue % 10];
 8000534:	4b67      	ldr	r3, [pc, #412]	@ (80006d4 <Run7SegDisplay+0x1d0>)
 8000536:	6819      	ldr	r1, [r3, #0]
 8000538:	4b67      	ldr	r3, [pc, #412]	@ (80006d8 <Run7SegDisplay+0x1d4>)
 800053a:	fb83 2301 	smull	r2, r3, r3, r1
 800053e:	109a      	asrs	r2, r3, #2
 8000540:	17cb      	asrs	r3, r1, #31
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	4613      	mov	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	1aca      	subs	r2, r1, r3
 800054e:	4b63      	ldr	r3, [pc, #396]	@ (80006dc <Run7SegDisplay+0x1d8>)
 8000550:	5c9b      	ldrb	r3, [r3, r2]
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	e015      	b.n	8000582 <Run7SegDisplay+0x7e>
	else
		val = Mask[(DisplayValue / 10) % 10];
 8000556:	4b5f      	ldr	r3, [pc, #380]	@ (80006d4 <Run7SegDisplay+0x1d0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a5f      	ldr	r2, [pc, #380]	@ (80006d8 <Run7SegDisplay+0x1d4>)
 800055c:	fb82 1203 	smull	r1, r2, r2, r3
 8000560:	1092      	asrs	r2, r2, #2
 8000562:	17db      	asrs	r3, r3, #31
 8000564:	1ad1      	subs	r1, r2, r3
 8000566:	4b5c      	ldr	r3, [pc, #368]	@ (80006d8 <Run7SegDisplay+0x1d4>)
 8000568:	fb83 2301 	smull	r2, r3, r3, r1
 800056c:	109a      	asrs	r2, r3, #2
 800056e:	17cb      	asrs	r3, r1, #31
 8000570:	1ad2      	subs	r2, r2, r3
 8000572:	4613      	mov	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4413      	add	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	1aca      	subs	r2, r1, r3
 800057c:	4b57      	ldr	r3, [pc, #348]	@ (80006dc <Run7SegDisplay+0x1d8>)
 800057e:	5c9b      	ldrb	r3, [r3, r2]
 8000580:	71fb      	strb	r3, [r7, #7]

	if (val & 0x80)
 8000582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000586:	2b00      	cmp	r3, #0
 8000588:	da06      	bge.n	8000598 <Run7SegDisplay+0x94>
		HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000590:	4853      	ldr	r0, [pc, #332]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 8000592:	f000 ff95 	bl	80014c0 <HAL_GPIO_WritePin>
 8000596:	e005      	b.n	80005a4 <Run7SegDisplay+0xa0>
	else
		HAL_GPIO_WritePin(PORT_7SEG_P, PIN_7SEG_P, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800059e:	4850      	ldr	r0, [pc, #320]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 80005a0:	f000 ff8e 	bl	80014c0 <HAL_GPIO_WritePin>

	if (val & 0x40)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d006      	beq.n	80005bc <Run7SegDisplay+0xb8>
		HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b4:	484a      	ldr	r0, [pc, #296]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 80005b6:	f000 ff83 	bl	80014c0 <HAL_GPIO_WritePin>
 80005ba:	e005      	b.n	80005c8 <Run7SegDisplay+0xc4>
	else
		HAL_GPIO_WritePin(PORT_7SEG_G, PIN_7SEG_G, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005c2:	4847      	ldr	r0, [pc, #284]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 80005c4:	f000 ff7c 	bl	80014c0 <HAL_GPIO_WritePin>

	if (val & 0x20)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <Run7SegDisplay+0xdc>
		HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d8:	4841      	ldr	r0, [pc, #260]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 80005da:	f000 ff71 	bl	80014c0 <HAL_GPIO_WritePin>
 80005de:	e005      	b.n	80005ec <Run7SegDisplay+0xe8>
	else
		HAL_GPIO_WritePin(PORT_7SEG_F, PIN_7SEG_F, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e6:	483e      	ldr	r0, [pc, #248]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 80005e8:	f000 ff6a 	bl	80014c0 <HAL_GPIO_WritePin>

	if (val & 0x10)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 0310 	and.w	r3, r3, #16
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <Run7SegDisplay+0x100>
		HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fc:	4838      	ldr	r0, [pc, #224]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 80005fe:	f000 ff5f 	bl	80014c0 <HAL_GPIO_WritePin>
 8000602:	e005      	b.n	8000610 <Run7SegDisplay+0x10c>
	else
		HAL_GPIO_WritePin(PORT_7SEG_E, PIN_7SEG_E, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060a:	4835      	ldr	r0, [pc, #212]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 800060c:	f000 ff58 	bl	80014c0 <HAL_GPIO_WritePin>

	if (val & 0x8)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f003 0308 	and.w	r3, r3, #8
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <Run7SegDisplay+0x124>
		HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000620:	482f      	ldr	r0, [pc, #188]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 8000622:	f000 ff4d 	bl	80014c0 <HAL_GPIO_WritePin>
 8000626:	e005      	b.n	8000634 <Run7SegDisplay+0x130>
	else
		HAL_GPIO_WritePin(PORT_7SEG_D, PIN_7SEG_D, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800062e:	482c      	ldr	r0, [pc, #176]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 8000630:	f000 ff46 	bl	80014c0 <HAL_GPIO_WritePin>

	if (val & 0x4)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <Run7SegDisplay+0x148>
		HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000644:	4826      	ldr	r0, [pc, #152]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 8000646:	f000 ff3b 	bl	80014c0 <HAL_GPIO_WritePin>
 800064a:	e005      	b.n	8000658 <Run7SegDisplay+0x154>
	else
		HAL_GPIO_WritePin(PORT_7SEG_C, PIN_7SEG_C, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000652:	4823      	ldr	r0, [pc, #140]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 8000654:	f000 ff34 	bl	80014c0 <HAL_GPIO_WritePin>

	if (val & 0x2)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <Run7SegDisplay+0x16c>
		HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000668:	481d      	ldr	r0, [pc, #116]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 800066a:	f000 ff29 	bl	80014c0 <HAL_GPIO_WritePin>
 800066e:	e005      	b.n	800067c <Run7SegDisplay+0x178>
	else
		HAL_GPIO_WritePin(PORT_7SEG_B, PIN_7SEG_B, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000676:	481a      	ldr	r0, [pc, #104]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 8000678:	f000 ff22 	bl	80014c0 <HAL_GPIO_WritePin>

	if (val & 0x1)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <Run7SegDisplay+0x190>
		HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800068c:	4814      	ldr	r0, [pc, #80]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 800068e:	f000 ff17 	bl	80014c0 <HAL_GPIO_WritePin>
 8000692:	e005      	b.n	80006a0 <Run7SegDisplay+0x19c>
	else
		HAL_GPIO_WritePin(PORT_7SEG_A, PIN_7SEG_A, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069a:	4811      	ldr	r0, [pc, #68]	@ (80006e0 <Run7SegDisplay+0x1dc>)
 800069c:	f000 ff10 	bl	80014c0 <HAL_GPIO_WritePin>


	if (pos & 0x1)
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <Run7SegDisplay+0x1c8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d005      	beq.n	80006b8 <Run7SegDisplay+0x1b4>
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL0, PIN_7SEG_CONTROL0, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2104      	movs	r1, #4
 80006b0:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <Run7SegDisplay+0x1cc>)
 80006b2:	f000 ff05 	bl	80014c0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
}
 80006b6:	e004      	b.n	80006c2 <Run7SegDisplay+0x1be>
		HAL_GPIO_WritePin(PORT_7SEG_CONTROL1, PIN_7SEG_CONTROL1, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2108      	movs	r1, #8
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <Run7SegDisplay+0x1cc>)
 80006be:	f000 feff 	bl	80014c0 <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000003c 	.word	0x2000003c
 80006d0:	40021800 	.word	0x40021800
 80006d4:	20000038 	.word	0x20000038
 80006d8:	66666667 	.word	0x66666667
 80006dc:	20000000 	.word	0x20000000
 80006e0:	40021000 	.word	0x40021000

080006e4 <DisplayLEDs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DisplayLEDs(int mode)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
if (mode == 1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d10d      	bne.n	800070e <DisplayLEDs+0x2a>
{
LED_Value = (LED_Value >> 1) | (LED_Value << 7);
 80006f2:	4b7a      	ldr	r3, [pc, #488]	@ (80008dc <DisplayLEDs+0x1f8>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	085b      	lsrs	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	4b77      	ldr	r3, [pc, #476]	@ (80008dc <DisplayLEDs+0x1f8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	01db      	lsls	r3, r3, #7
 8000702:	b25b      	sxtb	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b25b      	sxtb	r3, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b74      	ldr	r3, [pc, #464]	@ (80008dc <DisplayLEDs+0x1f8>)
 800070c:	701a      	strb	r2, [r3, #0]
}
if(mode == 2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b02      	cmp	r3, #2
 8000712:	d115      	bne.n	8000740 <DisplayLEDs+0x5c>
	{
		if(flag)
 8000714:	4b72      	ldr	r3, [pc, #456]	@ (80008e0 <DisplayLEDs+0x1fc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <DisplayLEDs+0x40>
			flag = 0;
 800071c:	4b70      	ldr	r3, [pc, #448]	@ (80008e0 <DisplayLEDs+0x1fc>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	e00d      	b.n	8000740 <DisplayLEDs+0x5c>
		else
			LED_Value = (LED_Value  << 1) | (LED_Value >> 7);
 8000724:	4b6d      	ldr	r3, [pc, #436]	@ (80008dc <DisplayLEDs+0x1f8>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	b25a      	sxtb	r2, r3
 800072c:	4b6b      	ldr	r3, [pc, #428]	@ (80008dc <DisplayLEDs+0x1f8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	09db      	lsrs	r3, r3, #7
 8000732:	b2db      	uxtb	r3, r3
 8000734:	b25b      	sxtb	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b25b      	sxtb	r3, r3
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b67      	ldr	r3, [pc, #412]	@ (80008dc <DisplayLEDs+0x1f8>)
 800073e:	701a      	strb	r2, [r3, #0]
	}
if(mode == 3)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d110      	bne.n	8000768 <DisplayLEDs+0x84>
{
	if(flag == 1)
 8000746:	4b66      	ldr	r3, [pc, #408]	@ (80008e0 <DisplayLEDs+0x1fc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d106      	bne.n	800075c <DisplayLEDs+0x78>
		       {
		            LED_Value = 0xFF;
 800074e:	4b63      	ldr	r3, [pc, #396]	@ (80008dc <DisplayLEDs+0x1f8>)
 8000750:	22ff      	movs	r2, #255	@ 0xff
 8000752:	701a      	strb	r2, [r3, #0]
		            flag = 0;
 8000754:	4b62      	ldr	r3, [pc, #392]	@ (80008e0 <DisplayLEDs+0x1fc>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	e005      	b.n	8000768 <DisplayLEDs+0x84>
		       }
		       else
		       {
		            LED_Value = 0x00;
 800075c:	4b5f      	ldr	r3, [pc, #380]	@ (80008dc <DisplayLEDs+0x1f8>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
		            flag = 1;
 8000762:	4b5f      	ldr	r3, [pc, #380]	@ (80008e0 <DisplayLEDs+0x1fc>)
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
		       }
}
if(mode == 4){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b04      	cmp	r3, #4
 800076c:	d11a      	bne.n	80007a4 <DisplayLEDs+0xc0>
		uint8_t value[8] = {0x81, 0x42, 0x24, 0x18,  0x24, 0x42, 0x81, 0x00};
 800076e:	4a5d      	ldr	r2, [pc, #372]	@ (80008e4 <DisplayLEDs+0x200>)
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000778:	e883 0003 	stmia.w	r3, {r0, r1}
				LED_Value = value[i];
 800077c:	4b5a      	ldr	r3, [pc, #360]	@ (80008e8 <DisplayLEDs+0x204>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3310      	adds	r3, #16
 8000782:	443b      	add	r3, r7
 8000784:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000788:	4b54      	ldr	r3, [pc, #336]	@ (80008dc <DisplayLEDs+0x1f8>)
 800078a:	701a      	strb	r2, [r3, #0]
				i++;
 800078c:	4b56      	ldr	r3, [pc, #344]	@ (80008e8 <DisplayLEDs+0x204>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a55      	ldr	r2, [pc, #340]	@ (80008e8 <DisplayLEDs+0x204>)
 8000794:	6013      	str	r3, [r2, #0]
				if (i == 8) i = 0;
 8000796:	4b54      	ldr	r3, [pc, #336]	@ (80008e8 <DisplayLEDs+0x204>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b08      	cmp	r3, #8
 800079c:	d102      	bne.n	80007a4 <DisplayLEDs+0xc0>
 800079e:	4b52      	ldr	r3, [pc, #328]	@ (80008e8 <DisplayLEDs+0x204>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
	}

if (LED_Value & 0x80)
 80007a4:	4b4d      	ldr	r3, [pc, #308]	@ (80008dc <DisplayLEDs+0x1f8>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	da06      	bge.n	80007bc <DisplayLEDs+0xd8>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b4:	484d      	ldr	r0, [pc, #308]	@ (80008ec <DisplayLEDs+0x208>)
 80007b6:	f000 fe83 	bl	80014c0 <HAL_GPIO_WritePin>
 80007ba:	e005      	b.n	80007c8 <DisplayLEDs+0xe4>
else
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c2:	484a      	ldr	r0, [pc, #296]	@ (80008ec <DisplayLEDs+0x208>)
 80007c4:	f000 fe7c 	bl	80014c0 <HAL_GPIO_WritePin>
if (LED_Value & 0x40)
 80007c8:	4b44      	ldr	r3, [pc, #272]	@ (80008dc <DisplayLEDs+0x1f8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <DisplayLEDs+0xfe>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007da:	4844      	ldr	r0, [pc, #272]	@ (80008ec <DisplayLEDs+0x208>)
 80007dc:	f000 fe70 	bl	80014c0 <HAL_GPIO_WritePin>
 80007e0:	e005      	b.n	80007ee <DisplayLEDs+0x10a>
else
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007e8:	4840      	ldr	r0, [pc, #256]	@ (80008ec <DisplayLEDs+0x208>)
 80007ea:	f000 fe69 	bl	80014c0 <HAL_GPIO_WritePin>
if (LED_Value & 0x20)
 80007ee:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <DisplayLEDs+0x1f8>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	f003 0320 	and.w	r3, r3, #32
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d006      	beq.n	8000808 <DisplayLEDs+0x124>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000800:	483a      	ldr	r0, [pc, #232]	@ (80008ec <DisplayLEDs+0x208>)
 8000802:	f000 fe5d 	bl	80014c0 <HAL_GPIO_WritePin>
 8000806:	e005      	b.n	8000814 <DisplayLEDs+0x130>
else
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800080e:	4837      	ldr	r0, [pc, #220]	@ (80008ec <DisplayLEDs+0x208>)
 8000810:	f000 fe56 	bl	80014c0 <HAL_GPIO_WritePin>
if (LED_Value & 0x10)
 8000814:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <DisplayLEDs+0x1f8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f003 0310 	and.w	r3, r3, #16
 800081c:	2b00      	cmp	r3, #0
 800081e:	d006      	beq.n	800082e <DisplayLEDs+0x14a>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000826:	4831      	ldr	r0, [pc, #196]	@ (80008ec <DisplayLEDs+0x208>)
 8000828:	f000 fe4a 	bl	80014c0 <HAL_GPIO_WritePin>
 800082c:	e005      	b.n	800083a <DisplayLEDs+0x156>
else
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000834:	482d      	ldr	r0, [pc, #180]	@ (80008ec <DisplayLEDs+0x208>)
 8000836:	f000 fe43 	bl	80014c0 <HAL_GPIO_WritePin>
if (LED_Value & 0x8)
 800083a:	4b28      	ldr	r3, [pc, #160]	@ (80008dc <DisplayLEDs+0x1f8>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <DisplayLEDs+0x170>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800084c:	4827      	ldr	r0, [pc, #156]	@ (80008ec <DisplayLEDs+0x208>)
 800084e:	f000 fe37 	bl	80014c0 <HAL_GPIO_WritePin>
 8000852:	e005      	b.n	8000860 <DisplayLEDs+0x17c>
else
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800085a:	4824      	ldr	r0, [pc, #144]	@ (80008ec <DisplayLEDs+0x208>)
 800085c:	f000 fe30 	bl	80014c0 <HAL_GPIO_WritePin>
if (LED_Value & 0x4)
 8000860:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <DisplayLEDs+0x1f8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	2b00      	cmp	r3, #0
 800086a:	d006      	beq.n	800087a <DisplayLEDs+0x196>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000872:	481e      	ldr	r0, [pc, #120]	@ (80008ec <DisplayLEDs+0x208>)
 8000874:	f000 fe24 	bl	80014c0 <HAL_GPIO_WritePin>
 8000878:	e005      	b.n	8000886 <DisplayLEDs+0x1a2>
else
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000880:	481a      	ldr	r0, [pc, #104]	@ (80008ec <DisplayLEDs+0x208>)
 8000882:	f000 fe1d 	bl	80014c0 <HAL_GPIO_WritePin>
if (LED_Value & 0x2)
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <DisplayLEDs+0x1f8>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <DisplayLEDs+0x1bc>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000898:	4814      	ldr	r0, [pc, #80]	@ (80008ec <DisplayLEDs+0x208>)
 800089a:	f000 fe11 	bl	80014c0 <HAL_GPIO_WritePin>
 800089e:	e005      	b.n	80008ac <DisplayLEDs+0x1c8>
else
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a6:	4811      	ldr	r0, [pc, #68]	@ (80008ec <DisplayLEDs+0x208>)
 80008a8:	f000 fe0a 	bl	80014c0 <HAL_GPIO_WritePin>
if (LED_Value & 0x1)
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <DisplayLEDs+0x1f8>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d006      	beq.n	80008c6 <DisplayLEDs+0x1e2>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <DisplayLEDs+0x208>)
 80008c0:	f000 fdfe 	bl	80014c0 <HAL_GPIO_WritePin>
else
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
}
 80008c4:	e005      	b.n	80008d2 <DisplayLEDs+0x1ee>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008cc:	4807      	ldr	r0, [pc, #28]	@ (80008ec <DisplayLEDs+0x208>)
 80008ce:	f000 fdf7 	bl	80014c0 <HAL_GPIO_WritePin>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	2000000c 	.word	0x2000000c
 80008e4:	0800256c 	.word	0x0800256c
 80008e8:	20000090 	.word	0x20000090
 80008ec:	40020c00 	.word	0x40020c00

080008f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d110      	bne.n	8000922 <HAL_GPIO_EXTI_Callback+0x32>
        display_value++;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	4a09      	ldr	r2, [pc, #36]	@ (800092c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000908:	6013      	str	r3, [r2, #0]
        if (display_value > 99) {
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_GPIO_EXTI_Callback+0x3c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b63      	cmp	r3, #99	@ 0x63
 8000910:	dd02      	ble.n	8000918 <HAL_GPIO_EXTI_Callback+0x28>
            display_value = 0;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
        }
        Set7SegDisplayValue(display_value);
 8000918:	4b04      	ldr	r3, [pc, #16]	@ (800092c <HAL_GPIO_EXTI_Callback+0x3c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fddd 	bl	80004dc <Set7SegDisplayValue>
    }
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000094 	.word	0x20000094

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  TIM6_Count = 0;
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <main+0x3c>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f000 fa6d 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f81b 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 f8bd 	bl	8000ac0 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000946:	f000 f887 	bl	8000a58 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800094a:	4809      	ldr	r0, [pc, #36]	@ (8000970 <main+0x40>)
 800094c:	f001 fb08 	bl	8001f60 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LED_Value = 1;
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <main+0x44>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  HAL_Delay(5);
 8000956:	2005      	movs	r0, #5
 8000958:	f000 fad0 	bl	8000efc <HAL_Delay>
	  Run7SegDisplay();
 800095c:	f7ff fdd2 	bl	8000504 <Run7SegDisplay>
	  DisplayLEDs(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff febf 	bl	80006e4 <DisplayLEDs>
	  HAL_Delay(5);
 8000966:	bf00      	nop
 8000968:	e7f5      	b.n	8000956 <main+0x26>
 800096a:	bf00      	nop
 800096c:	20000088 	.word	0x20000088
 8000970:	20000040 	.word	0x20000040
 8000974:	2000008c 	.word	0x2000008c

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	@ 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2230      	movs	r2, #48	@ 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fdb8 	bl	80024fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <SystemClock_Config+0xd8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a50 <SystemClock_Config+0xd8>)
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ac:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <SystemClock_Config+0xd8>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <SystemClock_Config+0xdc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a24      	ldr	r2, [pc, #144]	@ (8000a54 <SystemClock_Config+0xdc>)
 80009c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <SystemClock_Config+0xdc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009ec:	23b4      	movs	r3, #180	@ 0xb4
 80009ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fdfb 	bl	80015f8 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a08:	f000 f90e 	bl	8000c28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a0c:	f000 fda4 	bl	8001558 <HAL_PWREx_EnableOverDrive>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a16:	f000 f907 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a26:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2105      	movs	r1, #5
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 f855 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a44:	f000 f8f0 	bl	8000c28 <Error_Handler>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3750      	adds	r7, #80	@ 0x50
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40007000 	.word	0x40007000

08000a58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a66:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_TIM6_Init+0x60>)
 8000a68:	4a14      	ldr	r2, [pc, #80]	@ (8000abc <MX_TIM6_Init+0x64>)
 8000a6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <MX_TIM6_Init+0x60>)
 8000a6e:	2259      	movs	r2, #89	@ 0x59
 8000a70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_TIM6_Init+0x60>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_TIM6_Init+0x60>)
 8000a7a:	2263      	movs	r2, #99	@ 0x63
 8000a7c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <MX_TIM6_Init+0x60>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_TIM6_Init+0x60>)
 8000a86:	f001 fa1b 	bl	8001ec0 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000a90:	f000 f8ca 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_TIM6_Init+0x60>)
 8000aa2:	f001 fc9b 	bl	80023dc <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000aac:	f000 f8bc 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000040 	.word	0x20000040
 8000abc:	40001000 	.word	0x40001000

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b4e      	ldr	r3, [pc, #312]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a4d      	ldr	r2, [pc, #308]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b47      	ldr	r3, [pc, #284]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a46      	ldr	r2, [pc, #280]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b44      	ldr	r3, [pc, #272]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b40      	ldr	r3, [pc, #256]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a3f      	ldr	r2, [pc, #252]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b39      	ldr	r3, [pc, #228]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a38      	ldr	r2, [pc, #224]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b36      	ldr	r3, [pc, #216]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a31      	ldr	r2, [pc, #196]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <MX_GPIO_Init+0x154>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000b68:	482b      	ldr	r0, [pc, #172]	@ (8000c18 <MX_GPIO_Init+0x158>)
 8000b6a:	f000 fca9 	bl	80014c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000b74:	4829      	ldr	r0, [pc, #164]	@ (8000c1c <MX_GPIO_Init+0x15c>)
 8000b76:	f000 fca3 	bl	80014c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f246 010c 	movw	r1, #24588	@ 0x600c
 8000b80:	4827      	ldr	r0, [pc, #156]	@ (8000c20 <MX_GPIO_Init+0x160>)
 8000b82:	f000 fc9d 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b86:	2301      	movs	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4822      	ldr	r0, [pc, #136]	@ (8000c24 <MX_GPIO_Init+0x164>)
 8000b9c:	f000 fae4 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ba0:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000ba4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <MX_GPIO_Init+0x158>)
 8000bba:	f000 fad5 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bbe:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000bc2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <MX_GPIO_Init+0x15c>)
 8000bd8:	f000 fac6 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_14;
 8000bdc:	f246 030c 	movw	r3, #24588	@ 0x600c
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480a      	ldr	r0, [pc, #40]	@ (8000c20 <MX_GPIO_Init+0x160>)
 8000bf6:	f000 fab7 	bl	8001168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f000 fa7b 	bl	80010fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c04:	2006      	movs	r0, #6
 8000c06:	f000 fa94 	bl	8001132 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40021800 	.word	0x40021800
 8000c24:	40020000 	.word	0x40020000

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0e      	ldr	r2, [pc, #56]	@ (8000ccc <HAL_TIM_Base_MspInit+0x48>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d115      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2036      	movs	r0, #54	@ 0x36
 8000cb8:	f000 fa1f 	bl	80010fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cbc:	2036      	movs	r0, #54	@ 0x36
 8000cbe:	f000 fa38 	bl	8001132 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40001000 	.word	0x40001000
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f8c7 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  if (TIM6_Count < 3000)
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <EXTI0_IRQHandler+0x2c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000d40:	4293      	cmp	r3, r2
 8000d42:	dc04      	bgt.n	8000d4e <EXTI0_IRQHandler+0x1a>
  {
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14);
 8000d44:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d48:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <EXTI0_IRQHandler+0x30>)
 8000d4a:	f000 fbd2 	bl	80014f2 <HAL_GPIO_TogglePin>
  }
  TIM6_Count = 0;
 8000d4e:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <EXTI0_IRQHandler+0x2c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 fbe7 	bl	8001528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000088 	.word	0x20000088
 8000d64:	40021800 	.word	0x40021800

08000d68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  TIM6_Count++;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <TIM6_DAC_IRQHandler+0x2c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <TIM6_DAC_IRQHandler+0x2c>)
 8000d74:	6013      	str	r3, [r2, #0]
  if (TIM6_Count > 100000000)
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <TIM6_DAC_IRQHandler+0x2c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <TIM6_DAC_IRQHandler+0x30>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	dd03      	ble.n	8000d88 <TIM6_DAC_IRQHandler+0x20>
	  TIM6_Count = 5000;
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <TIM6_DAC_IRQHandler+0x2c>)
 8000d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d86:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d88:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <TIM6_DAC_IRQHandler+0x34>)
 8000d8a:	f001 f959 	bl	8002040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000088 	.word	0x20000088
 8000d98:	05f5e100 	.word	0x05f5e100
 8000d9c:	20000040 	.word	0x20000040

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc8:	f7ff ffea 	bl	8000da0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f001 fb8b 	bl	800250c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fd9b 	bl	8000930 <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dfc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e08:	08002594 	.word	0x08002594
  ldr r2, =_sbss
 8000e0c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e10:	2000009c 	.word	0x2000009c

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <HAL_Init+0x40>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <HAL_Init+0x40>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	@ (8000e58 <HAL_Init+0x40>)
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 f94f 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 f808 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fef2 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f967 	bl	800114e <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 f92f 	bl	80010fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	@ (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000010 	.word	0x20000010
 8000eb4:	20000018 	.word	0x20000018
 8000eb8:	20000014 	.word	0x20000014

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000018 	.word	0x20000018
 8000ee0:	20000098 	.word	0x20000098

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000098 	.word	0x20000098

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000018 	.word	0x20000018

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	@ (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f7ff ff8e 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff29 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff3e 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff8e 	bl	8001038 <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff31 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffa2 	bl	80010a0 <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e177      	b.n	8001474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8166 	bne.w	800146e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80c0 	beq.w	800146e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b66      	ldr	r3, [pc, #408]	@ (800148c <HAL_GPIO_Init+0x324>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a65      	ldr	r2, [pc, #404]	@ (800148c <HAL_GPIO_Init+0x324>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b63      	ldr	r3, [pc, #396]	@ (800148c <HAL_GPIO_Init+0x324>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a61      	ldr	r2, [pc, #388]	@ (8001490 <HAL_GPIO_Init+0x328>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a58      	ldr	r2, [pc, #352]	@ (8001494 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d037      	beq.n	80013a6 <HAL_GPIO_Init+0x23e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a57      	ldr	r2, [pc, #348]	@ (8001498 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d031      	beq.n	80013a2 <HAL_GPIO_Init+0x23a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a56      	ldr	r2, [pc, #344]	@ (800149c <HAL_GPIO_Init+0x334>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x236>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a55      	ldr	r2, [pc, #340]	@ (80014a0 <HAL_GPIO_Init+0x338>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x232>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a54      	ldr	r2, [pc, #336]	@ (80014a4 <HAL_GPIO_Init+0x33c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x22e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a53      	ldr	r2, [pc, #332]	@ (80014a8 <HAL_GPIO_Init+0x340>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x22a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a52      	ldr	r2, [pc, #328]	@ (80014ac <HAL_GPIO_Init+0x344>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a51      	ldr	r2, [pc, #324]	@ (80014b0 <HAL_GPIO_Init+0x348>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a50      	ldr	r2, [pc, #320]	@ (80014b4 <HAL_GPIO_Init+0x34c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4f      	ldr	r2, [pc, #316]	@ (80014b8 <HAL_GPIO_Init+0x350>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x21a>
 800137e:	2309      	movs	r3, #9
 8001380:	e012      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001382:	230a      	movs	r3, #10
 8001384:	e010      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001386:	2308      	movs	r3, #8
 8001388:	e00e      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138a:	2307      	movs	r3, #7
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138e:	2306      	movs	r3, #6
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b8:	4935      	ldr	r1, [pc, #212]	@ (8001490 <HAL_GPIO_Init+0x328>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c6:	4b3d      	ldr	r3, [pc, #244]	@ (80014bc <HAL_GPIO_Init+0x354>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ea:	4a34      	ldr	r2, [pc, #208]	@ (80014bc <HAL_GPIO_Init+0x354>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f0:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <HAL_GPIO_Init+0x354>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001414:	4a29      	ldr	r2, [pc, #164]	@ (80014bc <HAL_GPIO_Init+0x354>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <HAL_GPIO_Init+0x354>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143e:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <HAL_GPIO_Init+0x354>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_GPIO_Init+0x354>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <HAL_GPIO_Init+0x354>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae84 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3724      	adds	r7, #36	@ 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40021c00 	.word	0x40021c00
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40022400 	.word	0x40022400
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	041a      	lsls	r2, r3, #16
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43d9      	mvns	r1, r3
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	400b      	ands	r3, r1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f9d2 	bl	80008f0 <HAL_GPIO_EXTI_Callback>
  }
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40013c00 	.word	0x40013c00

08001558 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a1f      	ldr	r2, [pc, #124]	@ (80015e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_PWREx_EnableOverDrive+0x94>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001584:	f7ff fcae 	bl	8000ee4 <HAL_GetTick>
 8001588:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800158a:	e009      	b.n	80015a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800158c:	f7ff fcaa 	bl	8000ee4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800159a:	d901      	bls.n	80015a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e01f      	b.n	80015e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ac:	d1ee      	bne.n	800158c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b4:	f7ff fc96 	bl	8000ee4 <HAL_GetTick>
 80015b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015ba:	e009      	b.n	80015d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015bc:	f7ff fc92 	bl	8000ee4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015ca:	d901      	bls.n	80015d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e007      	b.n	80015e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015dc:	d1ee      	bne.n	80015bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	420e0040 	.word	0x420e0040
 80015f0:	40007000 	.word	0x40007000
 80015f4:	420e0044 	.word	0x420e0044

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e267      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d075      	beq.n	8001702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001616:	4b88      	ldr	r3, [pc, #544]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d00c      	beq.n	800163c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b85      	ldr	r3, [pc, #532]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800162a:	2b08      	cmp	r3, #8
 800162c:	d112      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162e:	4b82      	ldr	r3, [pc, #520]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4b7e      	ldr	r3, [pc, #504]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d05b      	beq.n	8001700 <HAL_RCC_OscConfig+0x108>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d157      	bne.n	8001700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e242      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x74>
 800165e:	4b76      	ldr	r3, [pc, #472]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a75      	ldr	r2, [pc, #468]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x98>
 8001676:	4b70      	ldr	r3, [pc, #448]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6f      	ldr	r2, [pc, #444]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b6d      	ldr	r3, [pc, #436]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6c      	ldr	r2, [pc, #432]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 8001690:	4b69      	ldr	r3, [pc, #420]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a68      	ldr	r2, [pc, #416]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b66      	ldr	r3, [pc, #408]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a65      	ldr	r2, [pc, #404]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc18 	bl	8000ee4 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fc14 	bl	8000ee4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	@ 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e207      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xc0>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fc04 	bl	8000ee4 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fc00 	bl	8000ee4 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	@ 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1f3      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	4b51      	ldr	r3, [pc, #324]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0xe8>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d063      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800170e:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001722:	2b08      	cmp	r3, #8
 8001724:	d11c      	bne.n	8001760 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	4b44      	ldr	r3, [pc, #272]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d116      	bne.n	8001760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x152>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e1c7      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4937      	ldr	r1, [pc, #220]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	e03a      	b.n	80017d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001768:	4b34      	ldr	r3, [pc, #208]	@ (800183c <HAL_RCC_OscConfig+0x244>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff fbb9 	bl	8000ee4 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff fbb5 	bl	8000ee4 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e1a8      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4925      	ldr	r1, [pc, #148]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017aa:	4b24      	ldr	r3, [pc, #144]	@ (800183c <HAL_RCC_OscConfig+0x244>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb98 	bl	8000ee4 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fb94 	bl	8000ee4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e187      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d036      	beq.n	8001850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d016      	beq.n	8001818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_RCC_OscConfig+0x248>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb78 	bl	8000ee4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb74 	bl	8000ee4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e167      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_RCC_OscConfig+0x240>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x200>
 8001816:	e01b      	b.n	8001850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_RCC_OscConfig+0x248>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff fb61 	bl	8000ee4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	e00e      	b.n	8001844 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fb5d 	bl	8000ee4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d907      	bls.n	8001844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e150      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
 8001838:	40023800 	.word	0x40023800
 800183c:	42470000 	.word	0x42470000
 8001840:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b88      	ldr	r3, [pc, #544]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ea      	bne.n	8001826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8097 	beq.w	800198c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b81      	ldr	r3, [pc, #516]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b7d      	ldr	r3, [pc, #500]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a7c      	ldr	r2, [pc, #496]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b77      	ldr	r3, [pc, #476]	@ (8001a6c <HAL_RCC_OscConfig+0x474>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4b74      	ldr	r3, [pc, #464]	@ (8001a6c <HAL_RCC_OscConfig+0x474>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a73      	ldr	r2, [pc, #460]	@ (8001a6c <HAL_RCC_OscConfig+0x474>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb1d 	bl	8000ee4 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7ff fb19 	bl	8000ee4 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e10c      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a6c <HAL_RCC_OscConfig+0x474>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2ea>
 80018d4:	4b64      	ldr	r3, [pc, #400]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d8:	4a63      	ldr	r2, [pc, #396]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x324>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x30c>
 80018ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6713      	str	r3, [r2, #112]	@ 0x70
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x324>
 8001904:	4b58      	ldr	r3, [pc, #352]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001908:	4a57      	ldr	r2, [pc, #348]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001910:	4b55      	ldr	r3, [pc, #340]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001914:	4a54      	ldr	r2, [pc, #336]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d015      	beq.n	8001950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fade 	bl	8000ee4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fada 	bl	8000ee4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0cb      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0ee      	beq.n	800192c <HAL_RCC_OscConfig+0x334>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fac8 	bl	8000ee4 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff fac4 	bl	8000ee4 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0b5      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ee      	bne.n	8001958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	4a38      	ldr	r2, [pc, #224]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a1 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001996:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d05c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d141      	bne.n	8001a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <HAL_RCC_OscConfig+0x478>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fa98 	bl	8000ee4 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fa94 	bl	8000ee4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e087      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	3b01      	subs	r3, #1
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	491b      	ldr	r1, [pc, #108]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <HAL_RCC_OscConfig+0x478>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fa6d 	bl	8000ee4 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff fa69 	bl	8000ee4 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e05c      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x416>
 8001a2c:	e054      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <HAL_RCC_OscConfig+0x478>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fa56 	bl	8000ee4 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fa52 	bl	8000ee4 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e045      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x470>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x444>
 8001a5a:	e03d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e038      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <HAL_RCC_OscConfig+0x4ec>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d028      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d121      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d11a      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d111      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0cc      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b68      	ldr	r3, [pc, #416]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d90c      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b65      	ldr	r3, [pc, #404]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b63      	ldr	r3, [pc, #396]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b8      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a58      	ldr	r2, [pc, #352]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b54:	4b53      	ldr	r3, [pc, #332]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a52      	ldr	r2, [pc, #328]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b50      	ldr	r3, [pc, #320]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	494d      	ldr	r1, [pc, #308]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d044      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b47      	ldr	r3, [pc, #284]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d119      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e07f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e067      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4934      	ldr	r1, [pc, #208]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff f984 	bl	8000ee4 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff f980 	bl	8000ee4 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e04f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d20c      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e032      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4916      	ldr	r1, [pc, #88]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490e      	ldr	r1, [pc, #56]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6e:	f000 f821 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	490a      	ldr	r1, [pc, #40]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	@ (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f8e4 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08002574 	.word	0x08002574
 8001cac:	20000010 	.word	0x20000010
 8001cb0:	20000014 	.word	0x20000014

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb8:	b094      	sub	sp, #80	@ 0x50
 8001cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ccc:	4b79      	ldr	r3, [pc, #484]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	f200 80e1 	bhi.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce6:	e0db      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b73      	ldr	r3, [pc, #460]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cec:	e0db      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cee:	4b73      	ldr	r3, [pc, #460]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8001cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cf2:	e0d8      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	2200      	movs	r2, #0
 8001d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d26:	4622      	mov	r2, r4
 8001d28:	462b      	mov	r3, r5
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	0159      	lsls	r1, r3, #5
 8001d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d38:	0150      	lsls	r0, r2, #5
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4621      	mov	r1, r4
 8001d40:	1a51      	subs	r1, r2, r1
 8001d42:	6139      	str	r1, [r7, #16]
 8001d44:	4629      	mov	r1, r5
 8001d46:	eb63 0301 	sbc.w	r3, r3, r1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d58:	4659      	mov	r1, fp
 8001d5a:	018b      	lsls	r3, r1, #6
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d62:	4651      	mov	r1, sl
 8001d64:	018a      	lsls	r2, r1, #6
 8001d66:	4651      	mov	r1, sl
 8001d68:	ebb2 0801 	subs.w	r8, r2, r1
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d86:	4690      	mov	r8, r2
 8001d88:	4699      	mov	r9, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	eb18 0303 	adds.w	r3, r8, r3
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	462b      	mov	r3, r5
 8001d94:	eb49 0303 	adc.w	r3, r9, r3
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da6:	4629      	mov	r1, r5
 8001da8:	024b      	lsls	r3, r1, #9
 8001daa:	4621      	mov	r1, r4
 8001dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001db0:	4621      	mov	r1, r4
 8001db2:	024a      	lsls	r2, r1, #9
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dba:	2200      	movs	r2, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dc4:	f7fe fa12 	bl	80001ec <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dd0:	e058      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b38      	ldr	r3, [pc, #224]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4611      	mov	r1, r2
 8001dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dec:	4642      	mov	r2, r8
 8001dee:	464b      	mov	r3, r9
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0159      	lsls	r1, r3, #5
 8001dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfe:	0150      	lsls	r0, r2, #5
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4641      	mov	r1, r8
 8001e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e24:	ebb2 040a 	subs.w	r4, r2, sl
 8001e28:	eb63 050b 	sbc.w	r5, r3, fp
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	00eb      	lsls	r3, r5, #3
 8001e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e3a:	00e2      	lsls	r2, r4, #3
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	461d      	mov	r5, r3
 8001e40:	4643      	mov	r3, r8
 8001e42:	18e3      	adds	r3, r4, r3
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	464b      	mov	r3, r9
 8001e48:	eb45 0303 	adc.w	r3, r5, r3
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	028b      	lsls	r3, r1, #10
 8001e5e:	4621      	mov	r1, r4
 8001e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e64:	4621      	mov	r1, r4
 8001e66:	028a      	lsls	r2, r1, #10
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	61fa      	str	r2, [r7, #28]
 8001e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e78:	f7fe f9b8 	bl	80001ec <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4613      	mov	r3, r2
 8001e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3750      	adds	r7, #80	@ 0x50
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e041      	b.n	8001f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fecc 	bl	8000c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3304      	adds	r3, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f000 f9c0 	bl	8002284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d001      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e04e      	b.n	8002016 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a23      	ldr	r2, [pc, #140]	@ (8002024 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d022      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa2:	d01d      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8002028 <HAL_TIM_Base_Start_IT+0xc8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d018      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800202c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00e      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x80>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a18      	ldr	r2, [pc, #96]	@ (800203c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d111      	bne.n	8002004 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d010      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002002:	e007      	b.n	8002014 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40010400 	.word	0x40010400
 8002038:	40014000 	.word	0x40014000
 800203c:	40001800 	.word	0x40001800

08002040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d020      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0202 	mvn.w	r2, #2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8dc 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8ce 	bl	8002234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8df 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d020      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0204 	mvn.w	r2, #4
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8b6 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8a8 	bl	8002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8b9 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d020      	beq.n	800213c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0208 	mvn.w	r2, #8
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2204      	movs	r2, #4
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f890 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f882 	bl	8002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f893 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d020      	beq.n	8002188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0210 	mvn.w	r2, #16
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2208      	movs	r2, #8
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f86a 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f85c 	bl	8002234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f86d 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0201 	mvn.w	r2, #1
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f83a 	bl	8002220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f98c 	bl	80024e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f83e 	bl	8002270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0220 	mvn.w	r2, #32
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f95e 	bl	80024d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a46      	ldr	r2, [pc, #280]	@ (80023b0 <TIM_Base_SetConfig+0x12c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a2:	d00f      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a43      	ldr	r2, [pc, #268]	@ (80023b4 <TIM_Base_SetConfig+0x130>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00b      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a42      	ldr	r2, [pc, #264]	@ (80023b8 <TIM_Base_SetConfig+0x134>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d007      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a41      	ldr	r2, [pc, #260]	@ (80023bc <TIM_Base_SetConfig+0x138>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d003      	beq.n	80022c4 <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a40      	ldr	r2, [pc, #256]	@ (80023c0 <TIM_Base_SetConfig+0x13c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d108      	bne.n	80022d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a35      	ldr	r2, [pc, #212]	@ (80023b0 <TIM_Base_SetConfig+0x12c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e4:	d027      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a32      	ldr	r2, [pc, #200]	@ (80023b4 <TIM_Base_SetConfig+0x130>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d023      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a31      	ldr	r2, [pc, #196]	@ (80023b8 <TIM_Base_SetConfig+0x134>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a30      	ldr	r2, [pc, #192]	@ (80023bc <TIM_Base_SetConfig+0x138>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01b      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a2f      	ldr	r2, [pc, #188]	@ (80023c0 <TIM_Base_SetConfig+0x13c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d017      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2e      	ldr	r2, [pc, #184]	@ (80023c4 <TIM_Base_SetConfig+0x140>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <TIM_Base_SetConfig+0x144>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00f      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2c      	ldr	r2, [pc, #176]	@ (80023cc <TIM_Base_SetConfig+0x148>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00b      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a2b      	ldr	r2, [pc, #172]	@ (80023d0 <TIM_Base_SetConfig+0x14c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2a      	ldr	r2, [pc, #168]	@ (80023d4 <TIM_Base_SetConfig+0x150>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a29      	ldr	r2, [pc, #164]	@ (80023d8 <TIM_Base_SetConfig+0x154>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d108      	bne.n	8002348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800233c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a10      	ldr	r2, [pc, #64]	@ (80023b0 <TIM_Base_SetConfig+0x12c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0xf8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <TIM_Base_SetConfig+0x13c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f023 0201 	bic.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
  }
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40000c00 	.word	0x40000c00
 80023c0:	40010400 	.word	0x40010400
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40014400 	.word	0x40014400
 80023cc:	40014800 	.word	0x40014800
 80023d0:	40001800 	.word	0x40001800
 80023d4:	40001c00 	.word	0x40001c00
 80023d8:	40002000 	.word	0x40002000

080023dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e05a      	b.n	80024aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a21      	ldr	r2, [pc, #132]	@ (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d022      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002440:	d01d      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d018      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00e      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a18      	ldr	r2, [pc, #96]	@ (80024c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d009      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a17      	ldr	r2, [pc, #92]	@ (80024cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a15      	ldr	r2, [pc, #84]	@ (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10c      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4313      	orrs	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800
 80024c4:	40000c00 	.word	0x40000c00
 80024c8:	40010400 	.word	0x40010400
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40001800 	.word	0x40001800

080024d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <memset>:
 80024fc:	4402      	add	r2, r0
 80024fe:	4603      	mov	r3, r0
 8002500:	4293      	cmp	r3, r2
 8002502:	d100      	bne.n	8002506 <memset+0xa>
 8002504:	4770      	bx	lr
 8002506:	f803 1b01 	strb.w	r1, [r3], #1
 800250a:	e7f9      	b.n	8002500 <memset+0x4>

0800250c <__libc_init_array>:
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	4d0d      	ldr	r5, [pc, #52]	@ (8002544 <__libc_init_array+0x38>)
 8002510:	4c0d      	ldr	r4, [pc, #52]	@ (8002548 <__libc_init_array+0x3c>)
 8002512:	1b64      	subs	r4, r4, r5
 8002514:	10a4      	asrs	r4, r4, #2
 8002516:	2600      	movs	r6, #0
 8002518:	42a6      	cmp	r6, r4
 800251a:	d109      	bne.n	8002530 <__libc_init_array+0x24>
 800251c:	4d0b      	ldr	r5, [pc, #44]	@ (800254c <__libc_init_array+0x40>)
 800251e:	4c0c      	ldr	r4, [pc, #48]	@ (8002550 <__libc_init_array+0x44>)
 8002520:	f000 f818 	bl	8002554 <_init>
 8002524:	1b64      	subs	r4, r4, r5
 8002526:	10a4      	asrs	r4, r4, #2
 8002528:	2600      	movs	r6, #0
 800252a:	42a6      	cmp	r6, r4
 800252c:	d105      	bne.n	800253a <__libc_init_array+0x2e>
 800252e:	bd70      	pop	{r4, r5, r6, pc}
 8002530:	f855 3b04 	ldr.w	r3, [r5], #4
 8002534:	4798      	blx	r3
 8002536:	3601      	adds	r6, #1
 8002538:	e7ee      	b.n	8002518 <__libc_init_array+0xc>
 800253a:	f855 3b04 	ldr.w	r3, [r5], #4
 800253e:	4798      	blx	r3
 8002540:	3601      	adds	r6, #1
 8002542:	e7f2      	b.n	800252a <__libc_init_array+0x1e>
 8002544:	0800258c 	.word	0x0800258c
 8002548:	0800258c 	.word	0x0800258c
 800254c:	0800258c 	.word	0x0800258c
 8002550:	08002590 	.word	0x08002590

08002554 <_init>:
 8002554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002556:	bf00      	nop
 8002558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255a:	bc08      	pop	{r3}
 800255c:	469e      	mov	lr, r3
 800255e:	4770      	bx	lr

08002560 <_fini>:
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002562:	bf00      	nop
 8002564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002566:	bc08      	pop	{r3}
 8002568:	469e      	mov	lr, r3
 800256a:	4770      	bx	lr
